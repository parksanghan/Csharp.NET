//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfApp1.ServiceReference2 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IFile", CallbackContract=typeof(WpfApp1.ServiceReference2.IFileCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IFile {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFile/FileServiceLoad")]
        void FileServiceLoad();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFile/FileServiceLoad")]
        System.Threading.Tasks.Task FileServiceLoadAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IFile/GetPicture")]
        void GetPicture(string strFileName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IFile/GetPicture")]
        System.Threading.Tasks.Task GetPictureAsync(string strFileName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IFile/GetPictureList")]
        void GetPictureList();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IFile/GetPictureList")]
        System.Threading.Tasks.Task GetPictureListAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IFile/UploadPicture")]
        void UploadPicture(string strFileName, byte[] bytePic);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IFile/UploadPicture")]
        System.Threading.Tasks.Task UploadPictureAsync(string strFileName, byte[] bytePic);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IFile/FileServiceClose")]
        void FileServiceClose();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IFile/FileServiceClose")]
        System.Threading.Tasks.Task FileServiceCloseAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFile/ServiceLoad")]
        void ServiceLoad();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFile/GetPictureACK")]
        void GetPictureACK(byte[] strFileName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFile/GetPictureListACK")]
        void GetPictureListACK(string[] msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFile/UploadPictureACK")]
        void UploadPictureACK();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFile/ServiceClose")]
        void ServiceClose();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileChannel : WpfApp1.ServiceReference2.IFile, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileClient : System.ServiceModel.DuplexClientBase<WpfApp1.ServiceReference2.IFile>, WpfApp1.ServiceReference2.IFile {
        
        public FileClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public FileClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public FileClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FileClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FileClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void FileServiceLoad() {
            base.Channel.FileServiceLoad();
        }
        
        public System.Threading.Tasks.Task FileServiceLoadAsync() {
            return base.Channel.FileServiceLoadAsync();
        }
        
        public void GetPicture(string strFileName) {
            base.Channel.GetPicture(strFileName);
        }
        
        public System.Threading.Tasks.Task GetPictureAsync(string strFileName) {
            return base.Channel.GetPictureAsync(strFileName);
        }
        
        public void GetPictureList() {
            base.Channel.GetPictureList();
        }
        
        public System.Threading.Tasks.Task GetPictureListAsync() {
            return base.Channel.GetPictureListAsync();
        }
        
        public void UploadPicture(string strFileName, byte[] bytePic) {
            base.Channel.UploadPicture(strFileName, bytePic);
        }
        
        public System.Threading.Tasks.Task UploadPictureAsync(string strFileName, byte[] bytePic) {
            return base.Channel.UploadPictureAsync(strFileName, bytePic);
        }
        
        public void FileServiceClose() {
            base.Channel.FileServiceClose();
        }
        
        public System.Threading.Tasks.Task FileServiceCloseAsync() {
            return base.Channel.FileServiceCloseAsync();
        }
    }
}
