//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace 시험1102.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IControlService")]
    public interface IControlService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/Load", ReplyAction="http://tempuri.org/IControlService/LoadResponse")]
        bool Load();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/Load", ReplyAction="http://tempuri.org/IControlService/LoadResponse")]
        System.Threading.Tasks.Task<bool> LoadAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/FormClosed", ReplyAction="http://tempuri.org/IControlService/FormClosedResponse")]
        bool FormClosed();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/FormClosed", ReplyAction="http://tempuri.org/IControlService/FormClosedResponse")]
        System.Threading.Tasks.Task<bool> FormClosedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/insecrtdata", ReplyAction="http://tempuri.org/IControlService/insecrtdataResponse")]
        bool insecrtdata(int data, string name, string ph, string ger);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/insecrtdata", ReplyAction="http://tempuri.org/IControlService/insecrtdataResponse")]
        System.Threading.Tasks.Task<bool> insecrtdataAsync(int data, string name, string ph, string ger);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/deletedata", ReplyAction="http://tempuri.org/IControlService/deletedataResponse")]
        bool deletedata(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/deletedata", ReplyAction="http://tempuri.org/IControlService/deletedataResponse")]
        System.Threading.Tasks.Task<bool> deletedataAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/selectall", ReplyAction="http://tempuri.org/IControlService/selectallResponse")]
        string selectall();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/selectall", ReplyAction="http://tempuri.org/IControlService/selectallResponse")]
        System.Threading.Tasks.Task<string> selectallAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/selectitem", ReplyAction="http://tempuri.org/IControlService/selectitemResponse")]
        string selectitem(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/selectitem", ReplyAction="http://tempuri.org/IControlService/selectitemResponse")]
        System.Threading.Tasks.Task<string> selectitemAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/updatedata", ReplyAction="http://tempuri.org/IControlService/updatedataResponse")]
        bool updatedata(int id, string ph);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/updatedata", ReplyAction="http://tempuri.org/IControlService/updatedataResponse")]
        System.Threading.Tasks.Task<bool> updatedataAsync(int id, string ph);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IControlServiceChannel : 시험1102.ServiceReference1.IControlService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ControlServiceClient : System.ServiceModel.ClientBase<시험1102.ServiceReference1.IControlService>, 시험1102.ServiceReference1.IControlService {
        
        public ControlServiceClient() {
        }
        
        public ControlServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ControlServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ControlServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ControlServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Load() {
            return base.Channel.Load();
        }
        
        public System.Threading.Tasks.Task<bool> LoadAsync() {
            return base.Channel.LoadAsync();
        }
        
        public bool FormClosed() {
            return base.Channel.FormClosed();
        }
        
        public System.Threading.Tasks.Task<bool> FormClosedAsync() {
            return base.Channel.FormClosedAsync();
        }
        
        public bool insecrtdata(int data, string name, string ph, string ger) {
            return base.Channel.insecrtdata(data, name, ph, ger);
        }
        
        public System.Threading.Tasks.Task<bool> insecrtdataAsync(int data, string name, string ph, string ger) {
            return base.Channel.insecrtdataAsync(data, name, ph, ger);
        }
        
        public bool deletedata(int id) {
            return base.Channel.deletedata(id);
        }
        
        public System.Threading.Tasks.Task<bool> deletedataAsync(int id) {
            return base.Channel.deletedataAsync(id);
        }
        
        public string selectall() {
            return base.Channel.selectall();
        }
        
        public System.Threading.Tasks.Task<string> selectallAsync() {
            return base.Channel.selectallAsync();
        }
        
        public string selectitem(int id) {
            return base.Channel.selectitem(id);
        }
        
        public System.Threading.Tasks.Task<string> selectitemAsync(int id) {
            return base.Channel.selectitemAsync(id);
        }
        
        public bool updatedata(int id, string ph) {
            return base.Channel.updatedata(id, ph);
        }
        
        public System.Threading.Tasks.Task<bool> updatedataAsync(int id, string ph) {
            return base.Channel.updatedataAsync(id, ph);
        }
    }
}
